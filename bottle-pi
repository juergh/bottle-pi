#!/usr/bin/env python3
#
# A simple REST API server that manages a bunch of Raspberry Pis
#

import argparse
import json
import os
import subprocess
import time
import yaml

import bottle
import cherrypy  # noqa: F401 / pylint: disable=W0611

try:
    import RPi.GPIO as gpio
except ModuleNotFoundError:
    class gpio():
        BOARD = 0
        OUT = 0
        LOW = 0
        HIGH = 1
        val = {}
        def setmode(_val):  # noqa: E301 / pylint: disable=E0213
            pass
        def setup(_pin, _val, _initial=None):  # noqa: E301 / pylint: disable=E0213
            pass
        def output(pin, val):  # noqa: E301 / pylint: disable=E0213
            gpio.val[pin] = val
        def input(pin):  # noqa: E301 / pylint: disable=E0213
            return gpio.val.get(pin, gpio.LOW)

app = bottle.Bottle()

def ssh(system, cmd):
    """
    Run the given command on the provided system
    """
    ssh_cmd = ['ssh',
               '-o', 'ConnectTimeout=2',
               '-o', 'BatchMode=yes',
               '-o', 'StrictHostKeyChecking=no',
               '-o', 'UserKnownHostsFile=/dev/null',
               '-o', 'User=bottle-pi',
               system['hostname']] + cmd
    return subprocess.run(ssh_cmd, capture_output=True, check=False)

def is_poweroff(system):
    """
    Is the system powered on?
    """
    return gpio.input(system['power']) == gpio.LOW

def poweroff(system, graceful=False):
    """
    Power off a system
    """
    if is_poweroff(system):
        return

    if graceful:
        # Try to shutdown the system via SSH
        resp = ssh(system, ['sudo', 'poweroff'])
        if resp.returncode == 0:
            # Wait some time for the system to shutdown
            time.sleep(10)

    # Power off
    gpio.output(system['power'], gpio.LOW)

def is_poweron(system):
    """
    Is the system powered off?
    """
    return gpio.input(system['power']) == gpio.HIGH

def poweron(system, update=False):
    """
    Power on a system
    """
    if is_poweron(system):
        return

    if update:
        # Invoke the installer by driving the gpio4 pin low
        gpio.output(system['gpio4'], gpio.LOW)
    else:
        # Make sure the installer is not invoked
        gpio.output(system['gpio4'], gpio.HIGH)

    # Power on
    gpio.output(system['power'], gpio.HIGH)

    if update:
        # Keep driving the gpio4 pin low for a bit to give the Pi firmware
        # enough time to sample its state
        time.sleep(20)
        gpio.output(system['gpio4'], gpio.HIGH)

def reset(system, graceful=False, update=False):
    """
    Reset a system
    """
    if is_poweron(system):
        poweroff(system, graceful=graceful)
        time.sleep(10)
    poweron(system, update=update)

# -----------------------------------------------------------------------------
# Redfish API routes

@app.get('/redfish')
def get_redfish():
    return {
        'v1': '/redfish/v1',
    }

@app.get('/redfish/v1')
@app.get('/redfish/v1/')  # Redfishtool wants a trailing slash
def get_redfish_v1():
    return {
        '@odata.id': '/redfish/v1',
        'Images': {
            '@odata.id': '/redfish/v1/Images',
        },
        'Systems': {
            '@odata.id': '/redfish/v1/Systems',
        },
    }

# ----------------------------------------
# Images

def IMAGES_get(name):
    """
    Return an image dict
    """
    if name in IMAGES:
        return IMAGES[name]
    bottle.abort(404)
    return {}

@app.get('/redfish/v1/Images')
def get_Images():
    return {
        '@odata.id': '/redfish/v1/Images',
        'Members@odata.count': len(IMAGES),
        'Members': [
            {'@odata.id': '/redfish/v1/Images/' + name} for name in IMAGES
        ],
    }

@app.get('/redfish/v1/Images/<name>')
def get_Images_name(name):
    image = IMAGES_get(name)
    return bottle.static_file(image['filename'], root='/')

# ----------------------------------------
# Systems

def SYSTEMS_get(name):
    """
    Return a system dict
    """
    if name in SYSTEMS:
        return SYSTEMS[name]
    for _, system in SYSTEMS.items():
        if system['hostname'] == name:
            return system
    bottle.abort(404)
    return {}

@app.get('/redfish/v1/Systems')
def get_Systems():
    members = []
    for name, system in SYSTEMS.items():
        members.append({
            '@odata.id': '/redfish/v1/Systems/' + name,
            'alias': '/redfish/v1/Systems/' + system['hostname'],
        })
    return {
        '@odata.id': '/redfish/v1/Systems',
        'Members@odata.count': len(members),
        'Members': members,
    }

@app.get('/redfish/v1/Systems/<name>')
def get_Systems_name(name):
    system = SYSTEMS_get(name)
    return {
        '@odata.id': '/redfish/v1/Systems/' + name,
        'Id': name,
        'SerialNumber': system['serialnumber'],
        'Model': system['model'],
        'HostName': system['hostname'],
        'PowerState': 'On' if is_poweron(system) else 'Off',
        'Actions': {
            '#ComputerSystem.Reset': {
                'target': '/redfish/v1/Systems/' + name +
                          '/Actions/ComputerSystem.Reset',
                'ResetType@Redfish.AllowableValues': [
                    'On',
                    'GracefulOff',
                    'GracefulRestart',
                    'ForceOff',
                    'ForceRestart',
                ],
            },
            '#ComputerSystem.Update': {
                'target': '/redfish/v1/Systems/' + name +
                          '/Actions/ComputerSystem.Update',
                'Image@Redfish.AllowableValues': [
                    '/redfish/v1/Images/' + name for name in IMAGES
                ],
            },
        },
    }

@app.post('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Reset')
def post_ComputerSystem_Reset_name(name):
    system = SYSTEMS_get(name)

    try:
        data = json.load(bottle.request.body)
    except json.decoder.JSONDecodeError:
        data = {}

    reset_type = data.get('ResetType', '')
    if reset_type == 'On':
        poweron(system)
    elif reset_type == 'GracefulOff':
        poweroff(system, graceful=True)
    elif reset_type == 'GracefulRestart':
        reset(system, graceful=True)
    elif reset_type == 'ForceOff':
        poweroff(system, graceful=False)
    elif reset_type == 'ForceRestart':
        reset(system, graceful=False)
    else:
        bottle.abort(400)

@app.post('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update')
def post_ComputerSystem_Update_name(name):
    system = SYSTEMS_get(name)

    try:
        data = json.load(bottle.request.body)
    except json.decoder.JSONDecodeError:
        data = {}

    image = data.get('Image', '')
    if image:
        if ((os.path.dirname(image) != '/redfish/v1/Images' or
             os.path.basename(image) not in IMAGES)):
            bottle.abort(400)
        system['update_image'] = image
        system['update_status'] = 'Pending'

    reset(system, graceful=False, update=True)

@app.get('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update')
def get_ComputerSystem_Update_name(name):
    system = SYSTEMS_get(name)
    return {
        '@odata.id': '/redfish/v1/Systems/' + name +
                     '/Actions/ComputerSystem.Update',
        'Image': system.get('update_image', ''),
        'Status': system.get('update_status', ''),
    }

@app.delete('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update')
def delete_ComputerSystem_Update_name(name):
    system = SYSTEMS_get(name)
    system['update_status'] = ''

@app.get('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update.Delete')
def get_ComputerSystem_Update_Delete_name(name):
    delete_ComputerSystem_Update_name(name)

# -----------------------------------------------------------------------------
# Main entry point

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true')
    args = parser.parse_args()

    # Load the config file
    config = None
    for f in ['./bottle-pi.config', '/etc/bottle-pi.config']:
        if os.path.exists(f):
            with open(f) as fh:
                config = yaml.load(fh, Loader=yaml.SafeLoader)
            break
    if config is None:
        raise Exception('Unable to load bottle-pi.config')

    # The list of available systems
    SYSTEMS = config['systems']

    # The list of available images
    IMAGES = {}
    images_pathname = config['images']['pathname']
    for name in os.listdir(images_pathname):
        image_filename = os.path.join(images_pathname, name)
        if os.path.isfile(image_filename):
            IMAGES[name] = {'filename': image_filename}

    # Use board pin numbers
    gpio.setmode(gpio.BOARD)

    # Setup the GPIOs
    for _, system in SYSTEMS.items():
        gpio.setup(system['power'], gpio.OUT)
        gpio.setup(system['gpio4'], gpio.OUT)

    # Run the bottle server
    bottle.run(app, host='0.0.0.0', port=config['port'], server='cherrypy',
               reloader=args.debug, debug=args.debug)
