#!/usr/bin/env python3
#
# A simple REST API server that manages a bunch of Raspberry Pis
#

import argparse
import json
import logging
import os
import time
import yaml

import bottle
import cherrypy  # noqa: F401 / pylint: disable=W0611

try:
    import gpiod
except ModuleNotFoundError:
    class gpiod():
        LINE_REQ_DIR_OUT = 0
        LINE_REQ_DIR_AS_IS = 1
        class Line():  # noqa: E301
            def __init__(self, chip, num):
                self.chip = chip
                self.num = num
            def request(self, *_args, **_kwargs):  # noqa: E301
                pass
            def release(self):  # noqa: E301
                pass
            def get_value(self):  # noqa: E301
                return self.chip.val.get(self.num, -1)
            def set_value(self, value):  # noqa: E301
                self.chip.val[self.num] = value
        class Chip():  # noqa: E301
            def __init__(self, *_args, **_kwargs):
                self.val = {}
            def get_line(self, num):  # noqa: E301
                return gpiod.Line(self, num)

class Gpio():
    """
    Simple GPIO class
    """
    def __init__(self, chip):
        self.chip = gpiod.Chip(chip)
        self.lines = {}

    def request(self, system, name, req_type):
        """
        Request a GPIO
        """
        pin = str(system['gpios'][name])
        if pin in self.lines:
            # Already requested
            return

        pr_debug(system, 'Gpio.request (name=%s, pin=%s, type=%s)', name, pin,
                 req_type)
        line = self.chip.get_line(GPIO_PIN_LINE_MAP[pin])
        default_val = None
        if req_type == gpiod.LINE_REQ_DIR_OUT:
            line.request(consumer='bottle-pi', type=gpiod.LINE_REQ_DIR_AS_IS)
            default_val = line.get_value()
            line.release()
        line.request(consumer='bottle-pi', type=req_type, default_val=default_val)
        self.lines[pin] = line

    def get_value(self, system, name):
        """
        Read a GPIO
        """
        pin = str(system['gpios'][name])
        line = self.lines[pin]
        value = line.get_value()
        pr_debug(system, 'Gpio.get_value (name=%s, pin=%s, value=%s)', name, pin,
                 value)
        return value

    def set_value(self, system, name, value):
        """
        Write a GPIO
        """
        pin = str(system['gpios'][name])
        pr_debug(system, 'Gpio.set_value (name=%s, pin=%s, value=%s)', name, pin,
                 value)
        line = self.lines[pin]
        line.set_value(value)

class System():
    """
    A simple system class
    """
    def __init__(self, configs):
        self.systems = configs['systems']
        pr_debug(None, 'Systems: %s', self.systems)

    def items(self):
        """
        Return all system items
        """
        return self.systems.items()

    def get(self, name):
        """
        Return a system dict
        """
        if name in self.systems:
            return self.systems[name]
        for _, system in self.systems.items():
            if system['hostname'] == name:
                return system
        bottle.abort(404)
        return {}

class Image():
    """
    A simple image class
    """
    def __init__(self, configs):
        self.pathname = configs['images']['pathname']
        self.images = {}
        self.refresh()
        pr_debug(None, 'Images: %s', self.images)

    def refresh(self):
        """
        Refresh all images
        """
        self.images = {}
        for name in os.listdir(self.pathname):
            filename = os.path.join(self.pathname, name)
            if os.path.isfile(filename):
                self.images[name] = {'filename': filename}

    def keys(self):
        """
        Return all images keys
        """
        return self.images.keys()

    def get(self, name):
        """
        Return an image dict
        """
        if name in self.images:
            return self.images[name]
        bottle.abort(404)
        return {}

# Mapping of header pins to gpio lines
GPIO = None
GPIO_PIN_LINE_MAP = {
     '3':  2,  '5':  3,  '7':  4,  '8': 14, '10': 15,  # noqa: E126, E241
    '11': 17, '12': 18, '13': 27, '15': 22, '16': 23,  # noqa: E131
    '18': 24, '19': 10, '21':  9, '22': 25, '23': 11,  # noqa: E241
    '24':  8, '26':  7, '27':  0, '28':  1, '29':  5,  # noqa: E241
    '31':  6, '32': 12, '33': 13, '35': 19, '36': 16,  # noqa: E241
    '37': 26, '38': 20, '40': 21,
}

SYSTEMS = None
IMAGES = None

app = bottle.Bottle()

def pr_debug(system, fmt, *args):
    if system and 'hostname' in system:
        logging.debug('[%s] ' + fmt, system['hostname'], *args)
    else:
        logging.debug(fmt, *args)

def is_poweron(system):
    """
    Is the system powered on?
    """
    return GPIO.get_value(system, 'power') == 1

def poweron(system, update=False):
    """
    Power on a system
    """
    if is_poweron(system):
        return

    if update:
        # Invoke the installer by driving the gpio4 pin low
        GPIO.set_value(system, 'gpio4', 0)
    else:
        # Make sure the installer is not invoked
        GPIO.set_value(system, 'gpio4', 1)

    # Power on
    GPIO.set_value(system, 'power', 1)

    if update:
        # Keep driving the gpio4 pin low for a bit to give the Pi firmware
        # enough time to sample its state
        time.sleep(20)
        GPIO.set_value(system, 'gpio4', 1)

def poweroff(system):
    """
    Power off a system
    """
    if not is_poweron(system):
        return

    # Power off
    GPIO.set_value(system, 'power', 0)

def reset(system, update=False):
    """
    Reset a system
    """
    if is_poweron(system):
        poweroff(system)
        time.sleep(10)
    poweron(system, update=update)

# -----------------------------------------------------------------------------
# Redfish API routes

@app.get('/redfish')
def get_redfish():
    return {
        'v1': '/redfish/v1',
    }

@app.get('/redfish/v1')
@app.get('/redfish/v1/')  # Redfishtool wants a trailing slash
def get_redfish_v1():
    return {
        '@odata.id': '/redfish/v1',
        'Images': {
            '@odata.id': '/redfish/v1/Images',
        },
        'Systems': {
            '@odata.id': '/redfish/v1/Systems',
        },
    }

# ----------------------------------------
# Images

@app.get('/redfish/v1/Images')
def get_Images():
    # Refresh the list of available images
    IMAGES.refresh()
    return {
        '@odata.id': '/redfish/v1/Images',
        'Members@odata.count': len(IMAGES.keys()),
        'Members': [
            {'@odata.id': '/redfish/v1/Images/' + name} for name in IMAGES.keys()
        ],
    }

@app.get('/redfish/v1/Images/<name>')
def get_Images_name(name):
    image = IMAGES.get(name)
    return bottle.static_file(image['filename'], root='/')

# ----------------------------------------
# Systems

@app.get('/redfish/v1/Systems')
def get_Systems():
    members = []
    for name, system in SYSTEMS.items():
        members.append({
            '@odata.id': '/redfish/v1/Systems/' + name,
            'alias': '/redfish/v1/Systems/' + system['hostname'],
        })
    return {
        '@odata.id': '/redfish/v1/Systems',
        'Members@odata.count': len(members),
        'Members': members,
    }

@app.get('/redfish/v1/Systems/<name>')
def get_Systems_name(name):
    system = SYSTEMS.get(name)
    return {
        '@odata.id': '/redfish/v1/Systems/' + name,
        'Id': name,
        'SerialNumber': system['serialnumber'],
        'Model': system['model'],
        'Features': [
            {
                'Name': key,
                'Value': val
            } for key, val in (system['features'] or {}).items()
        ],
        'HostName': system['hostname'],
        'PowerState': 'On' if is_poweron(system) else 'Off',
        'Gpios': [
            {
                'Name': key,
                'Pin': val,
                'Value': GPIO.get_value(system, key)
            } for key, val in system['gpios'].items()
        ],
        'Actions': {
            '#ComputerSystem.Reset': {
                'target': '/redfish/v1/Systems/' + name +
                          '/Actions/ComputerSystem.Reset',
                'ResetType@Redfish.AllowableValues': [
                    'On',
                    'ForceOff',
                    'ForceRestart',
                ],
            },
            '#ComputerSystem.Update': {
                'target': '/redfish/v1/Systems/' + name +
                          '/Actions/ComputerSystem.Update',
                'Image@Redfish.AllowableValues': [
                    '/redfish/v1/Images/' + name for name in IMAGES.keys()
                ],
            },
        },
        'Update': {
            'Image': system.get('update_image', ''),
            'Status': system.get('update_status', ''),
        },
    }

@app.post('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Reset')
def post_ComputerSystem_Reset_name(name):
    system = SYSTEMS.get(name)

    try:
        data = json.load(bottle.request.body)
    except json.decoder.JSONDecodeError:
        data = {}

    reset_type = data.get('ResetType', '')
    if reset_type == 'On':
        poweron(system)
    elif reset_type == 'ForceOff':
        poweroff(system)
    elif reset_type == 'ForceRestart':
        reset(system)
    else:
        bottle.abort(400)

@app.post('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update')
def post_ComputerSystem_Update_name(name):
    system = SYSTEMS.get(name)

    try:
        data = json.load(bottle.request.body)
    except json.decoder.JSONDecodeError:
        data = {}

    image = data.get('Image', '')
    if image:
        if ((os.path.dirname(image) != '/redfish/v1/Images' or
             os.path.basename(image) not in IMAGES)):
            bottle.abort(400)
        system['update_image'] = image
        system['update_status'] = 'Pending'

    reset(system, update=True)

@app.get('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update')
def get_ComputerSystem_Update_name(name):
    system = SYSTEMS.get(name)
    return {
        '@odata.id': '/redfish/v1/Systems/' + name +
                     '/Actions/ComputerSystem.Update',
        'Image': system.get('update_image', ''),
        'Status': system.get('update_status', ''),
    }

@app.delete('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update')
def delete_ComputerSystem_Update_name(name):
    system = SYSTEMS.get(name)
    system['update_image'] = ''
    system['update_status'] = ''

@app.get('/redfish/v1/Systems/<name>/Actions/ComputerSystem.Update.Delete')
def get_ComputerSystem_Update_Delete_name(name):
    delete_ComputerSystem_Update_name(name)

# -----------------------------------------------------------------------------
# Main entry point

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true')
    parser.add_argument('-r', '--reloader', action='store_true')
    args = parser.parse_args()

    # Setup the logger
    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        level=logging.DEBUG if args.debug else logging.INFO)

    # Load the config file
    configs = None
    for f in ['./bottle-pi.config', '/etc/bottle-pi.config']:
        if os.path.exists(f):
            with open(f) as fh:
                configs = yaml.load(fh, Loader=yaml.SafeLoader)
            break
    if configs is None:
        raise Exception('Unable to load bottle-pi.config')

    # Discover the available systems and images
    SYSTEMS = System(configs)
    IMAGES = Image(configs)

    # Request the GPIOs
    GPIO = Gpio('gpiochip0')
    for _, system in SYSTEMS.items():
        GPIO.request(system, 'power', gpiod.LINE_REQ_DIR_OUT)
        GPIO.request(system, 'gpio4', gpiod.LINE_REQ_DIR_OUT)

    # Run the bottle server
    bottle.run(app, host='0.0.0.0', port=configs['port'], server='cherrypy',
               debug=args.debug, reloader=args.reloader)
